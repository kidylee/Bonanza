/*
 * generated by Xtext 2.16.0
 */
package com.statestr.gcth.scoping

import com.google.inject.Inject
import com.statestr.gcth.bonanza.BonanzaPackage
import com.statestr.gcth.bonanza.EntityField
import com.statestr.gcth.bonanza.Mapper
import com.statestr.gcth.bonanza.SourceField
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BonanzaScopeProvider extends AbstractBonanzaScopeProvider {
	val epackage = BonanzaPackage.eINSTANCE

	@Inject extension var BonanzaIndex

	override getScope(EObject context, EReference reference) {

		if (reference == epackage.mapperField_To) {
			return scopeForMapperToField(context, reference)

		}
		
//		if(reference == epackage.transformCall_Transform){
//			return scopeForMapperTransformCall(context, reference)
//		}
		
		if(reference == epackage.transformParam_Field){
			return scopeForFromSourceField(context, reference)
		}
		
		if ((reference == epackage.fromExpress_Type)) {
			return scopeForFromSourceField(context, reference)

		}

		super.getScope(context, reference)

	}
	
	
	def  protected IScope scopeForFromSourceField(EObject context, EReference reference) {

		return switch (context) {
			Mapper: {

				val sourceFields = context.source?.getAllContentsOfType(SourceField)
				if(sourceFields === null) return IScope.NULLSCOPE

				Scopes.scopeFor(sourceFields)
			}
			default: {
				scopeForFromSourceField(context.eContainer, reference)

			}
		}

	}

	def  protected IScope scopeForMapperToField(EObject context, EReference reference) {

		return switch (context) {
			Mapper: {

				val entityFields = context.entity?.getAllContentsOfType(EntityField)
				if(entityFields === null) return IScope.NULLSCOPE

				Scopes.scopeFor(entityFields)
			}
			default: {
				scopeForMapperToField(context.eContainer, reference)

			}
		}

	}
}
