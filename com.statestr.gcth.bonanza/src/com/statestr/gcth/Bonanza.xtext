grammar com.statestr.gcth.Bonanza with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
generate bonanza "http://www.statestr.com/gcth/Bonanza"

Model:
	('package' name=QualifiedName)?
	imports+=XImportSection?
	models+=AbstractModel*;

AbstractModel:
	Source | Mapper | Entity | UtilClass;

Source:
	'source' name=ValidID '[' 'format' ':' format=SourceFormat (',' 'id' ':' sourceID=INT)? (',' 'mapper' ':'
	mapper=[Mapper|QualifiedName])?
	']' '{'
	fields+=SourceField*
	'}';

enum SourceFormat:
	XML='XML' | CSV='CSV';

SourceField:
	name=ID (':' type=[Source|QualifiedName])? path=StringOrInt;

StringOrInt:
	STRING | INT;

Mapper:
	'mapper' name=ValidID '[' 'from' ':' source=[Source|QualifiedName] ',' 'to' ':' entity=[Entity|QualifiedName] ']' '{'
	fields+=MapperField* '}';

MapperField:
	from=FromExpress '=>' to=[EntityField] ("with" call=TransformCall)?;

FromExpress:
	type=[SourceField] | hardCode=StringOrInt;

TransformCall:
	utilClass=[UtilClass] "." transform=[Transform] '(' params+=TransformParam (',' params+=TransformParam)* ')';

TransformParam:
	field=[SourceField] | const=StringOrInt;

EntityField:
	name=ValidID type=JvmTypeReference;

Entity:
	'entity' name=ValidID '{' fields+=EntityField* '}';

UtilClass:
	"class" name=ValidID "{" transforms+=Transform* "}";

Transform:
	type=JvmTypeReference name=ValidID '(' (params+=FullJvmFormalParameter (','
	params+=FullJvmFormalParameter)*)? ')' body=XBlockExpression;
	